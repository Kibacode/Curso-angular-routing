{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { throwError, zip } from 'rxjs';\nimport { checkTime } from './../interceptors/time.interceptor';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.API_URL}/api`;\n  }\n  getByCategory(categoryId, limit, offset) {\n    let params = new HttpParams();\n    console.log(limit && offset);\n    if (limit && offset) {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    return this.http.get(`${this.apiUrl}/categories/${categoryId}/products`, {\n      params,\n      context: checkTime()\n    });\n  }\n  getAll(limit, offset) {\n    let params = new HttpParams();\n    console.log(limit && offset);\n    if (limit && offset) {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    console.log(params);\n    return this.http.get(`${this.apiUrl}/products`, {\n      params,\n      context: checkTime()\n    }).pipe(retry(3), map(products => products.map(item => {\n      return {\n        ...item,\n        taxes: 0.19 * item.price\n      };\n    })));\n  }\n  fetchReadAndUpdate(id, dto) {\n    return zip(this.getOne(id), this.update(id, dto));\n  }\n  getOne(id) {\n    return this.http.get(`${this.apiUrl}/products/${id}`).pipe(catchError(error => {\n      if (error.status === 409 /* HttpStatusCode.Conflict */) {\n        return throwError('Algo esta fallando en el server');\n      }\n      if (error.status === 404 /* HttpStatusCode.NotFound */) {\n        return throwError('El producto no existe');\n      }\n      if (error.status === 401 /* HttpStatusCode.Unauthorized */) {\n        return throwError('No estas permitido');\n      }\n      return throwError('Ups algo salio mal');\n    }));\n  }\n  create(dto) {\n    return this.http.post(`${this.apiUrl}/products`, dto);\n  }\n  update(id, dto) {\n    return this.http.put(`${this.apiUrl}/products/${id}`, dto);\n  }\n  delete(id) {\n    return this.http.delete(`${this.apiUrl}/products/${id}`);\n  }\n  static #_ = this.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}