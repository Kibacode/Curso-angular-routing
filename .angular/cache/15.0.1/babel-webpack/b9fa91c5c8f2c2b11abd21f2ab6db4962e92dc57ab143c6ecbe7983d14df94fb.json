{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, InjectionToken, Directive, Inject, Optional, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/router';\nimport { PRIMARY_OUTLET } from '@angular/router';\nimport { EMPTY } from 'rxjs';\n\n// Using a global registry so we can keep it populated across lazy-loaded\n// modules with different parent injectors which create instance of the registry.\nconst globalRegistry = [];\nlet PrefetchRegistry = /*#__PURE__*/(() => {\n  class PrefetchRegistry {\n    constructor(router) {\n      this.router = router;\n      this.trees = globalRegistry;\n    }\n    add(tree) {\n      this.trees.push(tree);\n    }\n    shouldPrefetch(url) {\n      const tree = this.router.parseUrl(url);\n      return this.trees.some(containsTree.bind(null, tree));\n    }\n  }\n  PrefetchRegistry.ɵfac = function PrefetchRegistry_Factory(t) {\n    return new (t || PrefetchRegistry)(i0.ɵɵinject(i1.Router));\n  };\n  PrefetchRegistry.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PrefetchRegistry,\n    factory: PrefetchRegistry.ɵfac\n  });\n  return PrefetchRegistry;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction containsQueryParams(container, containee) {\n  // TODO: This does not handle array params correctly.\n  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every(key => containee[key] === container[key]);\n}\nfunction containsTree(containee, container) {\n  return containsQueryParams(container.queryParams, containee.queryParams) && containsSegmentGroup(container.root, containee.root, containee.root.segments);\n}\nfunction containsSegmentGroup(container, containee, containeePaths) {\n  if (container.segments.length > containeePaths.length) {\n    const current = container.segments.slice(0, containeePaths.length);\n    if (!equalPath(current, containeePaths)) return false;\n    if (containee.hasChildren()) return false;\n    return true;\n  } else if (container.segments.length === containeePaths.length) {\n    if (!equalPath(container.segments, containeePaths)) return false;\n    if (!containee.hasChildren()) return true;\n    for (const c in containee.children) {\n      if (!container.children[c]) break;\n      if (containsSegmentGroup(container.children[c], containee.children[c], containee.children[c].segments)) return true;\n    }\n    return false;\n  } else {\n    const current = containeePaths.slice(0, container.segments.length);\n    const next = containeePaths.slice(container.segments.length);\n    if (!equalPath(container.segments, current)) return false;\n    if (!container.children[PRIMARY_OUTLET]) return false;\n    return containsSegmentGroup(container.children[PRIMARY_OUTLET], containee, next);\n  }\n}\nfunction equalPath(as, bs) {\n  if (as.length !== bs.length) return false;\n  return as.every((a, i) => a.path === bs[i].path || a.path.startsWith(':') || bs[i].path.startsWith(':'));\n}\nconst requestIdleCallback = typeof window !== 'undefined' ? window.requestIdleCallback || function (cb) {\n  const start = Date.now();\n  return setTimeout(function () {\n    cb({\n      didTimeout: false,\n      timeRemaining: function () {\n        return Math.max(0, 50 - (Date.now() - start));\n      }\n    });\n  }, 1);\n} : () => {};\nconst observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;\nconst LinkHandler = new InjectionToken('LinkHandler');\nlet ObservableLinkHandler = /*#__PURE__*/(() => {\n  class ObservableLinkHandler {\n    constructor(loader, registry, ngZone) {\n      this.loader = loader;\n      this.registry = registry;\n      this.ngZone = ngZone;\n      this.elementLink = new Map();\n      this.observer = observerSupported() ? new IntersectionObserver(entries => {\n        entries.forEach(entry => {\n          if (!this.observer) {\n            return;\n          }\n          if (entry.isIntersecting) {\n            const link = entry.target;\n            const routerLink = this.elementLink.get(link);\n            if (!routerLink || !routerLink.urlTree) return;\n            this.registry.add(routerLink.urlTree);\n            this.observer.unobserve(link);\n            requestIdleCallback(() => {\n              this.loader.preload().subscribe(() => void 0);\n            });\n          }\n        });\n      }) : null;\n    }\n    register(el) {\n      this.elementLink.set(el.element, el);\n      this.ngZone.runOutsideAngular(() => {\n        if (!this.observer) {\n          return;\n        }\n        this.observer.observe(el.element);\n      });\n    }\n    // First call to unregister will not hit this.\n    unregister(el) {\n      if (!this.observer) {\n        return;\n      }\n      if (this.elementLink.has(el.element)) {\n        this.observer.unobserve(el.element);\n        this.elementLink.delete(el.element);\n      }\n    }\n    supported() {\n      return observerSupported();\n    }\n  }\n  ObservableLinkHandler.ɵfac = function ObservableLinkHandler_Factory(t) {\n    return new (t || ObservableLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i0.NgZone));\n  };\n  ObservableLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: ObservableLinkHandler,\n    factory: ObservableLinkHandler.ɵfac\n  });\n  return ObservableLinkHandler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet PreloadLinkHandler = /*#__PURE__*/(() => {\n  class PreloadLinkHandler {\n    constructor(loader, registry) {\n      this.loader = loader;\n      this.registry = registry;\n    }\n    register(el) {\n      this.registry.add(el.urlTree);\n      requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));\n    }\n    unregister(_) {}\n    supported() {\n      return true;\n    }\n  }\n  PreloadLinkHandler.ɵfac = function PreloadLinkHandler_Factory(t) {\n    return new (t || PreloadLinkHandler)(i0.ɵɵinject(i1.RouterPreloader), i0.ɵɵinject(PrefetchRegistry));\n  };\n  PreloadLinkHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: PreloadLinkHandler,\n    factory: PreloadLinkHandler.ɵfac\n  });\n  return PreloadLinkHandler;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet LinkDirective = /*#__PURE__*/(() => {\n  class LinkDirective {\n    constructor(linkHandlers, el, link, linkWithHref) {\n      this.linkHandlers = linkHandlers;\n      this.el = el;\n      this.linkHandler = this.linkHandlers.filter(h => h.supported()).shift();\n      this.rl = link || linkWithHref;\n      if (this.element && this.element.setAttribute) {\n        this.element.setAttribute('ngx-ql', '');\n      }\n    }\n    ngOnChanges(c) {\n      if (c['routerLink'] && this.linkHandler) {\n        this.linkHandler.unregister(this);\n        this.linkHandler.register(this);\n      }\n    }\n    ngOnDestroy() {\n      if (!this.linkHandler) {\n        return;\n      }\n      this.linkHandler.unregister(this);\n    }\n    get element() {\n      return this.el.nativeElement;\n    }\n    get urlTree() {\n      return this.rl.urlTree;\n    }\n  }\n  LinkDirective.ɵfac = function LinkDirective_Factory(t) {\n    return new (t || LinkDirective)(i0.ɵɵdirectiveInject(LinkHandler), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.RouterLink, 8), i0.ɵɵdirectiveInject(i1.RouterLinkWithHref, 8));\n  };\n  LinkDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n    type: LinkDirective,\n    selectors: [[\"\", \"routerLink\", \"\"]],\n    inputs: {\n      routerLink: \"routerLink\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature]\n  });\n  return LinkDirective;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet QuicklinkStrategy = /*#__PURE__*/(() => {\n  class QuicklinkStrategy {\n    constructor(registry, router) {\n      this.registry = registry;\n      this.router = router;\n      this.loading = new Set();\n    }\n    preload(route, load) {\n      if (this.loading.has(route)) {\n        // Don't preload the same route twice\n        return EMPTY;\n      }\n      const conn = typeof navigator !== 'undefined' ? navigator.connection : undefined;\n      if (conn) {\n        // Don't preload if the user is on 2G. or if Save-Data is enabled..\n        if ((conn.effectiveType || '').includes('2g') || conn.saveData) return EMPTY;\n      }\n      // Prevent from preloading\n      if (route.data && route.data['preload'] === false) {\n        return EMPTY;\n      }\n      const fullPath = findPath(this.router.config, route);\n      if (this.registry.shouldPrefetch(fullPath)) {\n        this.loading.add(route);\n        return load();\n      }\n      return EMPTY;\n    }\n  }\n  QuicklinkStrategy.ɵfac = function QuicklinkStrategy_Factory(t) {\n    return new (t || QuicklinkStrategy)(i0.ɵɵinject(PrefetchRegistry), i0.ɵɵinject(i1.Router));\n  };\n  QuicklinkStrategy.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: QuicklinkStrategy,\n    factory: QuicklinkStrategy.ɵfac\n  });\n  return QuicklinkStrategy;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst findPath = (config, route) => {\n  config = config.slice();\n  const parent = new Map();\n  const visited = new Set();\n  while (config.length) {\n    const el = config.shift();\n    if (!el) {\n      continue;\n    }\n    visited.add(el);\n    if (el === route) break;\n    let children = el.children || [];\n    const current = el._loadedConfig;\n    if (current && current.routes) {\n      children = children.concat(current.routes);\n    }\n    children.forEach(r => {\n      if (visited.has(r)) return;\n      parent.set(r, el);\n      config.push(r);\n    });\n  }\n  let path = '';\n  let current = route;\n  while (current) {\n    if (isPrimaryRoute(current)) {\n      path = `/${current.path}${path}`;\n    } else {\n      path = `/(${current.outlet}:${current.path}${path})`;\n    }\n    current = parent.get(current);\n  }\n  return path.replace(/\\/\\//, '/');\n};\nfunction isPrimaryRoute(route) {\n  return route.outlet === PRIMARY_OUTLET || !route.outlet;\n}\nlet QuicklinkModule = /*#__PURE__*/(() => {\n  class QuicklinkModule {}\n  QuicklinkModule.ɵfac = function QuicklinkModule_Factory(t) {\n    return new (t || QuicklinkModule)();\n  };\n  QuicklinkModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: QuicklinkModule\n  });\n  QuicklinkModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    providers: [{\n      provide: LinkHandler,\n      useClass: ObservableLinkHandler,\n      multi: true\n    }, {\n      provide: LinkHandler,\n      useClass: PreloadLinkHandler,\n      multi: true\n    }, PrefetchRegistry, QuicklinkStrategy]\n  });\n  return QuicklinkModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/*\n * Public API Surface of ngx-quicklink\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { QuicklinkModule, QuicklinkStrategy, LinkDirective as ɵɵLinkDirective };\n//# sourceMappingURL=ngx-quicklink.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}