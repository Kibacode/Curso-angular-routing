{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { throwError, zip } from 'rxjs';\nimport { checkTime } from './../interceptors/time.interceptor';\nimport { environment } from './../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.API_URL}/api/products`;\n  }\n  getAll(limit, offset) {\n    let params = new HttpParams();\n    console.log(limit && offset);\n    if (limit && offset) {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    console.log(params);\n    return this.http.get(this.apiUrl, {\n      params,\n      context: checkTime()\n    }).pipe(retry(3), map(products => products.map(item => {\n      return {\n        ...item,\n        taxes: 0.19 * item.price\n      };\n    })));\n  }\n  fetchReadAndUpdate(id, dto) {\n    return zip(this.getOne(id), this.update(id, dto));\n  }\n  getOne(id) {\n    return this.http.get(`${this.apiUrl}/${id}`).pipe(catchError(error => {\n      if (error.status === 409 /* HttpStatusCode.Conflict */) {\n        return throwError('Algo esta fallando en el server');\n      }\n      if (error.status === 404 /* HttpStatusCode.NotFound */) {\n        return throwError('El producto no existe');\n      }\n      if (error.status === 401 /* HttpStatusCode.Unauthorized */) {\n        return throwError('No estas permitido');\n      }\n      return throwError('Ups algo salio mal');\n    }));\n  }\n  create(dto) {\n    return this.http.post(this.apiUrl, dto);\n  }\n  update(id, dto) {\n    return this.http.put(`${this.apiUrl}/${id}`, dto);\n  }\n  delete(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static #_ = this.ɵfac = function ProductsService_Factory(t) {\n    return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductsService,\n    factory: ProductsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AACA,SAEEA,UAAU,QAGL,sBAAsB;AAC7B,SAASC,KAAK,EAAEC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;AACvD,SAASC,UAAU,EAAEC,GAAG,QAAQ,MAAM;AAOtC,SAASC,SAAS,QAAQ,oCAAoC;AAC9D,SAASC,WAAW,QAAQ,kCAAkC;;;AAK9D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,GAAGH,WAAW,CAACI,OAAO,eAAe;EAEf;EAEvCC,MAAM,CAACC,KAAc,EAAEC,MAAe;IACpC,IAAIC,MAAM,GAAG,IAAIf,UAAU,EAAE;IAC7BgB,OAAO,CAACC,GAAG,CAACJ,KAAK,IAAIC,MAAM,CAAC;IAC5B,IAAID,KAAK,IAAIC,MAAM,EAAE;MACnBC,MAAM,GAAGA,MAAM,CAACG,GAAG,CAAC,OAAO,EAAEL,KAAK,CAAC;MACnCE,MAAM,GAAGA,MAAM,CAACG,GAAG,CAAC,QAAQ,EAAEJ,MAAM,CAAC;;IAEvCE,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;IACnB,OAAO,IAAI,CAACL,IAAI,CACbS,GAAG,CAAY,IAAI,CAACC,MAAM,EAAE;MAAEL,MAAM;MAAEM,OAAO,EAAEf,SAAS;IAAE,CAAE,CAAC,CAC7DgB,IAAI,CACHrB,KAAK,CAAC,CAAC,CAAC,EACRE,GAAG,CAAEoB,QAAQ,IACXA,QAAQ,CAACpB,GAAG,CAAEqB,IAAI,IAAI;MACpB,OAAO;QACL,GAAGA,IAAI;QACPC,KAAK,EAAE,IAAI,GAAGD,IAAI,CAACE;OACpB;IACH,CAAC,CAAC,CACH,CACF;EACL;EAEAC,kBAAkB,CAACC,EAAU,EAAEC,GAAqB;IAClD,OAAOxB,GAAG,CAAC,IAAI,CAACyB,MAAM,CAACF,EAAE,CAAC,EAAE,IAAI,CAACG,MAAM,CAACH,EAAE,EAAEC,GAAG,CAAC,CAAC;EACnD;EAEAC,MAAM,CAACF,EAAU;IACf,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAU,GAAG,IAAI,CAACC,MAAM,IAAIQ,EAAE,EAAE,CAAC,CAACN,IAAI,CACxDpB,UAAU,CAAE8B,KAAwB,IAAI;MACtC,IAAIA,KAAK,CAACC,MAAM,wCAA8B;QAC5C,OAAO7B,UAAU,CAAC,iCAAiC,CAAC;;MAEtD,IAAI4B,KAAK,CAACC,MAAM,wCAA8B;QAC5C,OAAO7B,UAAU,CAAC,uBAAuB,CAAC;;MAE5C,IAAI4B,KAAK,CAACC,MAAM,4CAAkC;QAChD,OAAO7B,UAAU,CAAC,oBAAoB,CAAC;;MAEzC,OAAOA,UAAU,CAAC,oBAAoB,CAAC;IACzC,CAAC,CAAC,CACH;EACH;EAEA8B,MAAM,CAACL,GAAqB;IAC1B,OAAO,IAAI,CAACnB,IAAI,CAACyB,IAAI,CAAU,IAAI,CAACf,MAAM,EAAES,GAAG,CAAC;EAClD;EAEAE,MAAM,CAACH,EAAU,EAAEC,GAAqB;IACtC,OAAO,IAAI,CAACnB,IAAI,CAAC0B,GAAG,CAAU,GAAG,IAAI,CAAChB,MAAM,IAAIQ,EAAE,EAAE,EAAEC,GAAG,CAAC;EAC5D;EAEAQ,MAAM,CAACT,EAAU;IACf,OAAO,IAAI,CAAClB,IAAI,CAAC2B,MAAM,CAAU,GAAG,IAAI,CAACjB,MAAM,IAAIQ,EAAE,EAAE,CAAC;EAC1D;EAAC;qBA3DUpB,eAAe;EAAA;EAAA;WAAfA,eAAe;IAAA8B,SAAf9B,eAAe;IAAA+B,YAFd;EAAM","names":["HttpParams","retry","catchError","map","throwError","zip","checkTime","environment","ProductsService","constructor","http","API_URL","getAll","limit","offset","params","console","log","set","get","apiUrl","context","pipe","products","item","taxes","price","fetchReadAndUpdate","id","dto","getOne","update","error","status","create","post","put","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/kibacode/Cursos Platzi/Angular-router/src/app/services/products.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpClient,\n  HttpParams,\n  HttpErrorResponse,\n  HttpStatusCode,\n} from '@angular/common/http';\nimport { retry, catchError, map } from 'rxjs/operators';\nimport { throwError, zip } from 'rxjs';\n\nimport {\n  Product,\n  CreateProductDTO,\n  UpdateProductDTO,\n} from './../models/product.model';\nimport { checkTime } from './../interceptors/time.interceptor';\nimport { environment } from './../../environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductsService {\n  private apiUrl = `${environment.API_URL}/api/products`;\n\n  constructor(private http: HttpClient) {}\n\n  getAll(limit?: number, offset?: number) {\n    let params = new HttpParams();\n    console.log(limit && offset);\n    if (limit && offset) {\n      params = params.set('limit', limit);\n      params = params.set('offset', offset);\n    }\n    console.log(params);\n    return this.http\n      .get<Product[]>(this.apiUrl, { params, context: checkTime() })\n      .pipe(\n        retry(3),\n        map((products) =>\n          products.map((item) => {\n            return {\n              ...item,\n              taxes: 0.19 * item.price,\n            };\n          })\n        )\n      );\n  }\n\n  fetchReadAndUpdate(id: string, dto: UpdateProductDTO) {\n    return zip(this.getOne(id), this.update(id, dto));\n  }\n\n  getOne(id: string) {\n    return this.http.get<Product>(`${this.apiUrl}/${id}`).pipe(\n      catchError((error: HttpErrorResponse) => {\n        if (error.status === HttpStatusCode.Conflict) {\n          return throwError('Algo esta fallando en el server');\n        }\n        if (error.status === HttpStatusCode.NotFound) {\n          return throwError('El producto no existe');\n        }\n        if (error.status === HttpStatusCode.Unauthorized) {\n          return throwError('No estas permitido');\n        }\n        return throwError('Ups algo salio mal');\n      })\n    );\n  }\n\n  create(dto: CreateProductDTO) {\n    return this.http.post<Product>(this.apiUrl, dto);\n  }\n\n  update(id: string, dto: UpdateProductDTO) {\n    return this.http.put<Product>(`${this.apiUrl}/${id}`, dto);\n  }\n\n  delete(id: string) {\n    return this.http.delete<boolean>(`${this.apiUrl}/${id}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}